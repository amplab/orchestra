// This file is defining the communication module of Hermes

// The master builds the computation graph and does the scheduling, but has no
// contact with data. The messages it sends and receives are very small, which
// allows us to scale up to many clients. Data is typically referenced using so
// called objrefs. These are remote references to objects, which might be
// implemented using a global id or hashing. Each objref is associated with an
// immutable blob of data which for fault tolerance and efficiency reasons is
// distributed among a number of clients.

message Arg {
  optional uint64 objref = 1; // can either be call-by-reference for large objects
  repeated bytes data = 2; // or call-by-value for small objects
  optional uint64 typeinfo = 3; // if the argument is passed by value, this field holds type information
}

message Call {
  optional string name = 1;
  repeated uint64 args = 2;
  repeated uint64 result = 3; // typically a singleton, a list for map calls
  enum Type {
    INVOKE_CALL = 1; // normal function call
    MAP_CALL = 2; // perform a map
    REDUCE_CALL = 3; // perform a reduce
  }
  optional Type type = 4;
}

message Blob {
  optional uint64 objref = 1;
  optional bytes data = 2;
}

message PullInfo {
  optional uint64 workerid = 1;
  optional uint64 objref = 2;
}

message ObjInfo {
  optional uint64 objref = 1;
  repeated uint64 workerid = 2;
}

message SchedulerInfo {
  repeated uint64 worker_queue = 1;
  repeated Call job_queue = 2;
  repeated PullInfo pull_queue = 3;
  repeated ObjInfo objtable = 4;
}

enum MessageType {
  ACK = 1; // acknowledge a message
  INVOKE = 2;  // invoke a distributed function call (uses call)
  REGISTER_CLIENT = 3; // register a client (uses address)
  REGISTER_FUNCTION = 4; // register a function (uses workerid and fnname)
  PUSH = 5; // client delivers an object to another machine (uses blob)
  PULL = 6; // client tells server to initiate sending data from nearest client (uses objref)
  HELLO = 7; // for registering the subscription channel
  DELIVER = 8; // server wants the client to deliver an object to a client (uses objref and address)
  DONE = 9; // client signals to the server that the current function call is completed
  DEBUG = 10; // sending and receiving debug info
  ACC = 11; // accept the delivery of an object
}

message Message {
  optional MessageType type = 1; // type of the message
  optional Call call = 2; // function call to be executed
  optional string address = 3; // address of the client we are registering or delivering data to
  optional Blob blob = 4;
  optional uint64 objref = 5;
  optional uint64 workerid = 6; // uniquely identify worker
  optional string fnname = 7;
  optional SchedulerInfo scheduler_info = 8;
}
